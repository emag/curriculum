リテラル
========

リテラルの表
------------

+----------------------------+------------------------------------+------------------------------------+
| 種類                       | 例                                 | 備考                               |
+============================+====================================+====================================+
| 整数                       | ``42`` ``0xff`` ``012`` ``3r12``   | Java の ``long``                   |
+----------------------------+------------------------------------+------------------------------------+
| 浮動小数点数               | ``3.14`` ``6.02e23``               | Java の ``double``                 |
+----------------------------+------------------------------------+------------------------------------+
| 任意精度10進整数           | ``42N``                            |                                    |
+----------------------------+------------------------------------+------------------------------------+
| 任意精度10進浮動小数点数   | ``0.0000001M``                     | Java の ``java.math.BigDecimal``   |
+----------------------------+------------------------------------+------------------------------------+
| 分数                       | ``22/7``                           |                                    |
+----------------------------+------------------------------------+------------------------------------+
| 文字                       | ``\a`` ``\b`` ``\c``               | Java の ``char``                   |
+----------------------------+------------------------------------+------------------------------------+
|                            | ``\o141`` ``\o142`` ``\o143``      |                                    |
+----------------------------+------------------------------------+------------------------------------+
|                            | ``\☃`` ``\u2603``                  |                                    |
+----------------------------+------------------------------------+------------------------------------+
|                            | ``\space`` ``\newline``            |                                    |
+----------------------------+------------------------------------+------------------------------------+
|                            | ``\formfeed`` ``\return``          |                                    |
+----------------------------+------------------------------------+------------------------------------+
|                            | ``\backspace`` ``\tab``            |                                    |
+----------------------------+------------------------------------+------------------------------------+
| null                       | ``nil``                            | Java の ``null``                   |
+----------------------------+------------------------------------+------------------------------------+
| 論理値                     | ``true`` ``false``                 | Java の ``boolean``                |
+----------------------------+------------------------------------+------------------------------------+
| 文字列                     | "clojure"                          | Java の ``java.lang.String``       |
+----------------------------+------------------------------------+------------------------------------+
| キーワード                 | ``:kw`` ``:foo.bar/kw``            |                                    |
+----------------------------+------------------------------------+------------------------------------+
|                            | ``::nsed-kw`` ``::alias/kw``       |                                    |
+----------------------------+------------------------------------+------------------------------------+

整数
~~~~

Clojure の整数は Java の ``long`` である。

-  10 進整数

   -  例. ``42``

-  16 進整数

   -  例. ``0xff``
   -  ``0x`` ではじまるリテラルは 16 進整数

-  8 進整数

   -  例. ``012`` => 10 進整数の 10
   -  ``0`` ではじまるリテラルは 8 進整数

-  10 進，16 進，8 進以外の整数

   -  例. ``3r12``
   -  ``ArB`` で「A 進数で B」という意味になる。上の例は 3 進数で 12
      なので 10 進数に直すと 5 となる。
   -  最大で 36 進数までに対応している。

Java の ``long`` より大きい精度が必要な場合は， Clojure の BigInt
を使うこともできる。 10 進整数リテラルの末尾に ``N`` を追加すると BigInt
となる。 整数が Java の ``long`` で表現できる範囲内でも BigInt
となる。また， 10 進整数リテラルが Java の ``long``
で表現できる範囲を越えていると， ``N`` がついていなくても BigInt
となる。

-  任意精度 10 進整数

   -  ``42N``
   -  ``10000000000000000000000000000000000000000000000000N``
   -  ``10000000000000000000000000000000000000000000000000``

Clojure には Java の ``int``, ``short`` に相当するリテラルが無い。
プログラム中でどうしても Java の ``int``, ``short``
が必要となった場合には ``int`` 関数または ``short`` を使って ``long`` の
10 進整数を ``int`` または ``short`` に変換する。

.. code:: example

      (int 42)   ;=> int
      (short 42) ;=> short

Java のように数字をアンダースコア (``_``) でつなげることはできない (e.g.
``1_000_000`` はエラー). また， ``0b`` ではじまる Java の 2
進数表記も使えないので，2 進数表記が必要なときは変わりに ``2r...``
を使う。

浮動小数点数
~~~~~~~~~~~~

Clojure の浮動小数点数は Java の ``double`` である。

-  浮動小数点数

   -  ``3.14``

-  浮動小数点数（指数表記）

   -  ``6.02e23``

Clojure には Java の ``float`` に相当するリテラルが無い。
プログラム中でどうしても Java の ``float`` が必要となった場合には
``float`` 関数を使って ``double`` の 浮動小数点数を ``float``
に変換する。

.. code:: example

      (float 3.14) ;=> float

任意精度の 10 進浮動小数点数が必要な場合は， Java の
``java.math.BigDecimal`` を使うこともできる。
浮動小数点数リテラルの直後に ``M`` を追加すると BigDecimal となる。

-  任意精度 10 進浮動小数点数

   -  ``3.14M``
   -  ``6.02e23M``

分数
~~~~

整数でスラッシュ (/)
をはさんだリテラルは分数となる。分数は約分され，約分の結果が整数になる場合，その分数リテラルは整数となる。

-  分数

   -  ``22/7``
   -  ``66/9`` => 22/3
   -  ``60/6`` => 10

文字
~~~~

Clojure の文字は Java の ``char`` である。 文字の前にバックスラッシュ
(``\``) を置くと文字リテラルとなる。 ``\o`` ではじめることで 8
進数表記もできる。

-  文字リテラル

   -  ``\a``, ``\b``, ``\c``

-  文字リテラル（8 進数表記）

   -  ``\o141``, ``\o142``, ``\o143``

Clojure の文字リテラルにはユニコード文字を使うこともできる。また，
(``\u``) ではじまるコードポイントによる指定も可能である。Clojure
で利用できるユニコードのバージョンは，Clojure で利用する JVM
のバージョンに依存する。 JDK 1.8.0 の場合は Unicode Standard バージョン
6.2.0 となる。

-  文字リテラル（ユニコード）

   -  ``\☃``

-  文字リテラル（ユニコードコードポイント）

   -  ``\u2603``

空白文字のリテラルについては，次の名前つきリテラルをつかうこともできる。

-  文字リテラル（空白文字用）

   -  ``\space``, ``\newline``, ``\formfeed``, ``\return``,
      ``\backpace``, ``\tab``

文字列
~~~~~~

Clojure の文字列は Java の ``java.lang.String``
である。ダブルクォテーションで囲まれたリテラルは文字列リテラルとなる。

.. code:: example

      "abc"
      "ab\nc"

Clojure の文字列は，文字列中に改行文字列を含めることができる。

.. code:: example

      "きこえ...
      　　　ますか..."

は，

.. code:: example

      "きこえ...\n　　　ますか..."

と書くのと同じである。

キーワード
~~~~~~~~~~

コロン (``:``)
で始まるリテラルはキーワードとなる。キーワードの名前空間はデフォルトでは
``nil`` となる。キーワードリテラルにスラッシュ (``/``)
を含む場合はスラッシュの前をキーワードの名前空間として扱う。ただし，名前空間名がエイリアスの場合はコロンを
2 つに増やす (``::``) 必要がある。コロン 2
つではじまるキーワードがスラッシュを含んでいない場合，すなわち，名前空間で修飾されていない場合は，そのキーワードが存在する名前空間で修飾される。

-  キーワード

   -  ``:kw``

-  名前空間修飾キーワード

   -  ``:foo.bar/kw`` => ``foo.bar`` 名前空間の ``:kw`` キーワード

-  名前空間修飾キーワード（名前空間名がエイリアスの場合）

   -  ``:baz/kw`` => ``(alias 'baz 'foo.bar)`` されている場合
      ``foo.bar`` 名前空間の ``:kw`` キーワード

-  現在の名前空間のキーワード

   -  ``::kw``

数字やスラッシュ (/)
ではじまるキーワードを作ることもできるが，避けたほうがよい。

-  非推奨キーワード

   -  ``:42``
   -  ``:/foo/bar/baz``

リテラルっぽいものの表
----------------------

+------------+---------------------------------------------------------------+---------------------------------------+
| 種類       | 例                                                            | 備考                                  |
+============+===============================================================+=======================================+
| 正規表現   | #"(:raw-latex:`\d`+)-(:raw-latex:`\d`+)-(:raw-latex:`\d`+)"   | Java の ``java.util.regex.Pattern``   |
+------------+---------------------------------------------------------------+---------------------------------------+
| ベクタ     | ``[1 2 3]``                                                   |                                       |
+------------+---------------------------------------------------------------+---------------------------------------+
| マップ     | ``{:a 1 :b 2 :c 3}``                                          |                                       |
+------------+---------------------------------------------------------------+---------------------------------------+
| セット     | ``#{:foo :bar :baz}``                                         |                                       |
+------------+---------------------------------------------------------------+---------------------------------------+
| 関数       | ``#(zero? (rem % 3))``                                        |                                       |
+------------+---------------------------------------------------------------+---------------------------------------+

正規表現
~~~~~~~~

Clojure の正規表現は Java の ``java.util.regex.Pattern``
である。文字列と似ているが，ダブルクォテーションで囲った文字列の直前に
``#``
を追加すると正規表現リテラルとなる。正規表現リテラルは文字列リテラルではないので，Java
で文字列から Pattern
オブジェクトにコンパイルするときとは異なり，バックスラッシュ (``\``)
をエスケープする必要はない。

.. code:: example

      #"(\d+)-(\d+)-(\d+)"

ベクタ (Vector)
~~~~~~~~~~~~~~~

角かっこ (``[...]``) で囲むとベクタになる。各要素は 1
文字以上の空白文字で区切る。空白文字にはカンマ (~,~)
を使うこともできるが， Clojrue では単にスペース ( )
一文字を使うことが多い。ベクタが長くなる場合は，見易さのため，改行で要素を区切るのもよい。

.. code:: example

      [1 2 3]

      [1,2,3]

      [1, 2, 3]

      [1 2 3
       4 5 6
       7 8 9]

ベクタ・マップ・セットの要素としては，リテラルのほかに，フォームも利用できる。

.. code:: example

      [(+ 1 2) (- 3 4) (* 5 6)]

      [3 -1 30]

リテラルを使わずに ``vector`` 関数を使って書く方法もある。

.. code:: example

      (vector 1 2 3) ;= [1 2 3]

マップ (Map)
~~~~~~~~~~~~

波カッコ (``{}``) で囲むとマップになる。キー 1，キー 1
に相当する値，キー 2, キー 2 に相当する値，...
のように，キーと値とを交互に並べる。各要素を 1
文字以上の空白文字で区切るところはベクタと同じ。ベクタと同じく，空白文字にはスペース
1 文字を使うことが多いが，キーと値のペアを一組として，その区切りにカンマ
(,)
を入れて見易くする場合もある。また，キーと値のペアを改行で区切って見易くすることも多い。

.. code:: clojure

      {:a 1 :b 2 :c 3}

      {:tokyo 13503810, :osaka 8847600, :fukuoka 5092990}

      {:tokyo   13503810
       :osaka   8847600
       :fukuoka 5092990}

リテラルを使わずに ``array-map`` 関数，あるいは， ``hash-map``
関数を使って書く方法もある。

.. code:: example

      (array-map :a 1 :b 2 :c 3) ;= {:a 1, :b 2, :c 3}
      (hash-map :a 1 :b 2 :c 3)

セット (Set)
~~~~~~~~~~~~

マップと似ているが，波カッコ (``{}``) で囲ってその前に ``#``
をつけるとセットになる ( ``#{ ... }`` ). セットの各要素を 1
文字以上の空白文字で区切って波カッコの中に並べる。

.. code:: example

      #{:foo :bar :baz}

リテラルを使わずに ``hash-set`` 関数を使って書く方法もある。

.. code:: example

      (hash-set :foo :bar :baz) ;= #{:foo :bar :baz}

関数リテラル
~~~~~~~~~~~~

カッコで囲ってその直前に ``#`` をつけると関数リテラルになる (
``#( ... )`` ).

.. code:: example

      #(zero? (rem % 3))

は，

.. code:: example

      (fn
        [x]
        (zero? (rem x 3)))

と書ける。ネストした関数リテラルを書くことはできない。
